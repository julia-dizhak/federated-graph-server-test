### This file was generated by Nexus Schema
### Do not make changes to this file directly

enum AccountType {
  admin
  supplier
  user
}

type AllCategoryType {
  first: Int
  firstName: String
  second: Int
  secondName: String
  third: Int
  thirdName: String
}

type Allocation {
  createdAt: DateTime!
  demandAttributes: JSON
  demandId: String
  id: String!
  isManual: Boolean
  item: String
  kpiAttributes: JSON
  offerAttributes: JSON
  offerId: String
  roundId: String
  scenario: Scenario
  scenarioId: String
  supplier: String
  totalPrice: Float
  updatedAt: DateTime!
  volume: Float
}

type AribaBiddingRoundSupplier {
  """
  Bidding round supplier name
  """
  name: String

  """
  Number of processed offers from the supplier
  """
  offerCount: Int

  """
  Summed total cost of all processed offers from the supplier
  """
  offerPriceTotal: Float
}

type AribaImportDataStatus {
  validationErrors: AribaImportValidation
}

type AribaImportStatus {
  data: AribaImportDataStatus
  job: Job!
}

type AribaImportValidation {
  concerning: [String!]!
  errorType: AribaImportValidationError
}

enum AribaImportValidationError {
  NO_EVENT_ID_FOUND
  UNKNOWN
}

type BatchPayload {
  count: Int
}

type BidColumn {
  calculation: String
  columnInputBy: BidColumnInputBy!
  columnType: ColumnType
  createdAt: DateTime!
  description: String
  discounts(
    after: DiscountWhereUniqueInput
    before: DiscountWhereUniqueInput
    first: Int
    last: Int
  ): [Discount!]!
  id: String!
  initialMatchingConfidence: Float!
  initialTypeId: Int
  inputBy: String!
    @deprecated(reason: "Deprecated field, use columnInputBy instead")
  isAutomatic: Boolean
  isMandatory: Boolean
  isVisible: Boolean
  limitMax: Float
  limitMin: Float
  matchingConfidence: Float!
  name: String!
  order: Int
  project: Project!
  projectId: String!
  singleChoices: [String!]!
  typeId: Int
  updatedAt: DateTime!
}

"""
Describes what kind of user should input this column data
"""
enum BidColumnInputBy {
  BUYER
  SUPPLIER
}

type BiddingRound {
  bidColumns: [BidColumn!]!
  bidsheetUploadDiff(jobId: ID!): BidsheetUploadDiffResult
  branchId: String!
  createdAt: DateTime!
  createdBy: String
  deletedAt: DateTime

  """
  Demands for project
  """
  demands: [Demand!]!

  """
  Number of demands for current bidding round
  """
  demandsCount: Int
  demandsProcessingJobStatus: JobStatus
  description: String
  endAt: DateTime

  """
  Number of fields with errors for the current supplier branch
  """
  fieldsWithErrorCount: Int!

  """
  Return true if round has offers from supplier
  """
  hasRoundOffers: Boolean
  id: String!
  isRoundStartingImmediately: Boolean
  name: String!

  """
  Number of offers for the current supplier branch
  """
  offersCount: Int!
  offersSubmittedAt: DateTime
  originalEndAt: DateTime
  project: Project
  projectId: String
  reminderAt: DateTime

  """
  Returns a list of all suppliers in a given round and their relevant offer metadata. This field is used in the Ariba context. In the future, it will be merged with the suppliers field.
  """
  roundSuppliers: [AribaBiddingRoundSupplier!]!
  setting: JSON
  startAt: DateTime
  status: BiddingRoundStatus
  statusId: Int
  statusName: String @deprecated(reason: "Use the field 'status' instead.")
  supplierBidData(
    filter: SupplierBidDataFilterOptions
    limit: Int!
    offset: Int
    sort: SupplierBidDataSortOptions
  ): SupplierBidDataPage!
  supplierBiddingData: [JSON!]!

  """
  Returns a list of all suppliers in a given round and their relevant offer metadata. This field is used in the RFQ context. In the future, it will be merged with the roundSuppliers field.
  """
  suppliers: [BiddingRoundSupplier!]!
  timezone: String
  updatedAt: DateTime!
  updatedBy: String
}

"""
Status of a bidding round
"""
enum BiddingRoundStatus {
  Active
  Draft
  Finished
  Paused
}

type BiddingRoundSupplier {
  """
  documents uploaded by supplier on event level
  """
  documents: [File!]!
  id: ID!

  """
  Bidding round supplier name
  """
  name: String!

  """
  Number of processed offers from the supplier
  """
  offerCount: Int

  """
  Supplier's response status
  """
  offerStatus: String!

  """
  Summed total cost of all processed offers from the supplier
  """
  offersPriceTotal: Float
}

input BiddingRoundWhereUniqueInput {
  id: String
}

type BidsheetTemplateReuploadResult {
  job: Job!
}

type BidsheetUploadColumnsDiff {
  ignoredColumns: [String!]
}

type BidsheetUploadDiff {
  columns: BidsheetUploadColumnsDiff
  items: BidsheetUploadItemsDiff
  validationErrors: BidsheetUploadValidationError
}

type BidsheetUploadDiffResult {
  data: BidsheetUploadDiff
  job: Job!
}

type BidsheetUploadItemsDiff {
  ignoredItems: [String!]
  modifiedItems: [String!]
  removedItems: [String!]
}

type BidsheetUploadValidationError {
  concerning: [String!]!
  errorType: BidsheetUploadValidationErrorType!
}

enum BidsheetUploadValidationErrorType {
  ANY_COLUMNS_MISSING
  INVALID_IDENTIFIER_COLUMN
  NO_CHANGES
  START_ROW_CONTAINS_NO_COLUMNS
  UNKNOWN
  WRONG_OFFER_SHEET
}

type Branch {
  accountType: String!
  company: Company
  companyId: String
  createdAt: DateTime!
  id: String!
  json: JSON
  location: String!
  name: String!
  role: Role
  roleId: Int
  updatedAt: DateTime!
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
  ): [User!]!
}

input BranchWhereUniqueInput {
  id: String
  name: String
}

type ColumnType {
  id: Int!
  inputBy: String
  isAssignable: Boolean!
  isBuyer: Boolean!
  isDefault: Boolean
  isNumeric: Boolean
  isSupplier: Boolean!
  isUnique: Boolean
  text: String
  type: String!
}

type Company {
  branches(
    after: BranchWhereUniqueInput
    before: BranchWhereUniqueInput
    first: Int
    last: Int
  ): [Branch!]!
  createdAt: DateTime!
  id: String!
  name: String!
  updatedAt: DateTime!
}

type CostFormula {
  calculation: String
  id: String!
  isValid: Boolean!
}

input CreateDemandInput {
  attribute: JSON
}

union CreateProjectError = ProjectNameDuplicatedError

input CreateProjectInput {
  biddingTypeId: Int
  currencyId: Int!
  name: String!
  projectCategoryTypeId: Int!
  status: EnumProjectsStatus
  type: EnumProjectType
  unitId: Int!
}

type CreateProjectResult {
  createProjectError: CreateProjectError
  project: Project
}

union CreateUserPayload =
    GenericCreateUserError
  | User
  | UserAlreadyExistsCreateUserError
  | UserBelongsToSSOOrgCreateUserError

type CurrencyRate {
  createdAt: DateTime!
  fromCurrency: ProjectCurrency
  fromCurrencyId: Int
  id: String!
  projectId: String
  rate: Float
  toCurrency: ProjectCurrency
  toCurrencyId: Int
  updatedAt: DateTime!
}

"""
A date-time string at UTC, such as 2007-12-03T10:15:30Z, compliant with the `date-time` format outlined in section 5.6 of the RFC 3339 profile of the ISO 8601 standard for representation of dates and times using the Gregorian calendar.
"""
scalar DateTime

type Demand {
  attribute: JSON
  branchId: String!
  createdAt: DateTime!
  createdBy: String
  currentUserOffers: [Offer!]!
  id: String!
  item: String!
  optimizationFileId: String
  updatedAt: DateTime!
  updatedBy: String
  volume: Float
}

type DemandsPayload {
  itemName: JSON
}

type Discount {
  bidColumn: BidColumn
  biddingRound: BiddingRound!
  bucketId: String!
  createdAt: DateTime!
  description: String
  discountAmount: Float!
  discountType: DiscountType!
  discountTypeId: Int!
  discountUnit: DiscountUnit!
  discountUnitId: Int!
  id: String!
  priceComponent: String
  roundId: String!
  supplier: String
  threshold: Float!
  updatedAt: DateTime!
  volumeName: String
}

type DiscountType {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

type DiscountUnit {
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

input DiscountWhereUniqueInput {
  id: String
}

type DocumentUrl {
  url: String
}

type EndDateDoesNotExistError implements UserActionError {
  message: String!
}

enum EnumEventsStatus {
  archived
  draft
  finished
  paused
  published
}

enum EnumProjectType {
  standard
  test
}

enum EnumProjectsStatus {
  archived
  draft
  finished
  open
}

type Event {
  biddingRound(biddingRoundId: ID!): BiddingRound
  biddingRounds(
    after: BiddingRoundWhereUniqueInput
    before: BiddingRoundWhereUniqueInput
    first: Int
    last: Int
  ): [BiddingRound!]!
  collaborators: [User]
  contactPersonEmail: String!
  contactPersonName: String!
  createdAt: DateTime!
  currentSupplierProgress: EventSupplierProgressStatusEnum!
  description: String
  documents: [File!]
  downloadBidSheetFileUrl: String
  id: String!
  latestBiddingRound: BiddingRound
  name: String!
  participation: SupplierEventParticipationInfo!
  project: Project!
  projectId: String!
  status: EnumEventsStatus!
  supplierBiddingRounds: [BiddingRound!]!
  supplierLatestRound: BiddingRound
  suppliers: [ParticipatingSupplier!]
  updatedAt: DateTime!
}

"""
Status of a bidding event
"""
enum EventStatus {
  ARCHIVED
  DRAFT
  FINISHED
  PAUSED
  PUBLISHED
}

"""
Supplier status for the event progress
"""
enum EventSupplierProgressStatusEnum {
  CONFIRMATION_DECLINED
  CONFIRMATION_PENDING
  DID_NOT_PARTICIPATE_IN_ROUND
  NO_OFFERS_SUBMITTED
  OFFERS_PENDING
  OFFERS_SUBMITTED
  OFFERS_UPLOADED_AND_VALID
}

type File {
  createdAt: DateTime!
  id: ID!
  name: String!
  updatedAt: DateTime!
  url: String
}

type GenericCreateUserError implements UserActionError {
  message: String!
}

type Invite {
  branch: Branch
  branchId: String
  companyName: String
  createdAt: DateTime!
  email: String!
  event: Event!
  eventId: String!
  id: String!
  updatedAt: DateTime!
  user: User
  userId: String
}

union InviteSupplierForEventError =
    InvitedEmailDoesNotExistError
  | SupplierAlreadyInvitedError

input InviteSupplierForEventInput {
  companyName: String!
  email: String!
}

type InviteSupplierForEventResult {
  error: InviteSupplierForEventError
  invite: Invite
}

type InvitedEmailDoesNotExistError implements UserActionError {
  emailAddress: String!
  message: String!
}

"""
The `JSON` scalar type represents JSON values as specified by [ECMA-404](http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf).
"""
scalar JSON
  @specifiedBy(
    url: "http://www.ecma-international.org/publications/files/ECMA-ST/ECMA-404.pdf"
  )

type Job {
  id: ID!
  status: JobStatus!
}

"""
Status of an asynchronous job
"""
enum JobStatus {
  ABORTED
  CANCELED
  PENDING
  RUNNING
  SUCCEEDED
  UNKNOWN
}

enum Language {
  de
  en
}

type Mutation {
  acceptParticipationForEvent(eventId: ID!): String!
  addBiddingRound(projectId: String!): BiddingRound
  addBiddingTypeToProject(biddingTypeId: Int!, projectId: String!): Project
  awardScenarioToProject(
    projectId: String!
    scenarioDescription: String
    scenarioId: String!
    scenarioName: String!
  ): Project
  broadcastMessage(
    message: String!
    projectId: ID!
    recipients: [String!]!
    sender: String!
  ): String!
  changeUserLanguageSettings(language: Language!, userId: ID!): User
  changeUserPassword(oldPassword: String!, password: String!): User
  commitReuploadedBidsheetTemplate(jobId: ID!, projectId: ID!): Job
  commitUploadedBidsheetForEvent(
    biddingRoundId: ID!
    eventId: ID!
    jobId: ID!
  ): Job
  createBranch(
    accountType: AccountType!
    companyId: String!
    json: JSON!
    location: String!
    name: String!
    roleId: Int!
  ): Branch
  createCompany(name: String!): Company
  createEvent(projectId: String!, status: EnumEventsStatus): Event
  createEventBiddingRound(eventId: ID!, projectId: ID!): BiddingRound
  createUser(
    branchId: String!
    email: String!
    firstName: String!
    isBuyer: Boolean!
    isSupplier: Boolean!
    lastName: String!
    password: String!
    roleId: Int!
    username: String!
  ): CreateUserPayload
  declineParticipationForEvent(eventId: ID!): String!
  deleteBidColumn(bidColumnId: String!, projectId: String!): BidColumn
  deleteBranch(id: String!): Branch
  deleteCompany(id: String!): Company
  deleteCurrencyRates(currencyRateIds: [String!]!): BatchPayload
  deleteDocumentFromEvent(eventId: ID!, fileId: ID!): File
  deleteInvite(inviteId: String!, projectId: String!): Invite
  deleteOffers(offerIds: [String]!): BatchPayload
  deleteOptimizationFile(fileIds: [String!]!, projectId: String!): BatchPayload
  deleteProject(projectId: String!): Project
  deleteProjectAccess(projectId: String!, userId: String!): ProjectAccess
  deleteScenario(projectId: String!, scenarioId: String!): Scenario
  deleteSupplierDocumentFromEvent(eventId: ID!, fileId: ID!): File
  deleteUser(id: String!): User
  generateBidCorrectionsExcel(
    projectId: String!
    roundId: String!
    selectedSupplier: String!
  ): UrlPayload
  generateBidSheetWithSupplierOffers(
    eventId: ID!
    roundId: ID!
    supplierId: ID!
  ): UrlPayload
  generateDownloadUrlForDocument(eventId: ID!, fileId: ID!): DocumentUrl
  generateDownloadUrlForSupplierDocument(eventId: ID!, fileId: ID!): DocumentUrl
  importAribaData(aribaEventId: ID!, projectId: ID!, roundId: ID!): Job!
  inviteSupplierForEvent(
    eventId: ID!
    input: InviteSupplierForEventInput!
    projectId: ID!
  ): InviteSupplierForEventResult
  markOfferStatusAsNew(projectId: String!, roundId: String!): BatchPayload
  publishAribaBiddingRound(
    biddingRoundId: ID!
    projectId: String!
  ): BiddingRound
  publishEventBiddingRound(
    biddingRoundId: ID!
    eventId: ID!
  ): PublishEventBiddingRoundPayload!
  resetPassword(id: ID!): User
  reuploadBidsheetTemplate(
    biddingRoundId: ID!
    file: Upload!
    projectId: ID!
  ): BidsheetTemplateReuploadResult!
  revertParticipationToPending(biddingRoundId: ID!, eventId: ID!): String!
  setFileType(
    fileId: String!
    fileType: String!
    projectId: String!
  ): OptimizationFile
  setOptimizationFileToNew(
    fileId: String!
    projectId: String!
  ): OptimizationFile
  setProjectDeletedAt(projectId: String!): Project
  setupNewProject(input: CreateProjectInput!): CreateProjectResult!
  shareProject(projectId: String!, userIds: [String!]!): BatchPayload
  submitSupplierOffersForBiddingRound(biddingRoundId: ID!, eventId: ID!): Event!
  supplierUploadDocumentToEvent(eventId: ID!, file: Upload!): File!
  toggleOffersBaseline(
    fileId: String!
    isHistoric: Boolean!
    projectId: String!
  ): BatchPayload
  triggerBidSheetProcessing(projectId: ID!): Job!
  unawardScenarioToProject(projectId: String!): Project
  updateBiddingRound(
    biddingRoundId: ID!
    endAt: String!
    eventId: ID!
    timezone: String!
  ): BiddingRound
  updateBranch(
    accountType: AccountType
    companyId: String
    id: String
    json: JSON
    location: String
    name: String
    roleId: Int
  ): Branch
  updateCompany(id: String!, name: String!): Company
  updateEvent(
    contactPersonEmail: String!
    contactPersonName: String!
    description: String
    eventId: ID!
    name: String!
    projectId: String!
  ): Event
  updateProjectAccessType(
    accessType: ProjectAccessType!
    projectId: String!
    userId: String!
  ): ProjectAccess
  updateUser(
    email: String
    firstName: String
    id: String!
    isBuyer: Boolean
    isSupplier: Boolean
    lastName: String
    password: String
    roleId: Int
    username: String
  ): User
  uploadAndDiffBidsheetForEvent(
    biddingRoundId: ID!
    eventId: ID!
    file: Upload!
  ): BidsheetUploadDiffResult
  uploadBaselineBidSheet(
    biddingRoundId: ID!
    file: Upload!
    projectId: ID!
  ): Job!
  uploadDocumentToEvent(eventId: ID!, file: Upload!): Event!
}

type NoDemandsInBiddingRoundError implements UserActionError {
  message: String!
  suggestion: String!
}

type Offer {
  attribute: JSON
  attributes: JSON
  createdAt: DateTime!
  createdBy: String
  demandId: String
  id: String!
  isHistoric: Boolean
  optimizationFileId: String
  priceTotal: Float
  processingMessage: JSON
  roundId: String
  status: Int!
  supplier: String
  totalFixedPrice: Float
  totalVarPrice: Float
  totalVolume: Float
  updatedAt: DateTime!
  updatedBy: String
}

type Optimization {
  branchId: String!
  createdAt: DateTime!
  id: ID!
  input: JSON!
  output: JSON!
  progress: Int!
  projectId: String
  roundId: String
  scenarioId: String
  status: JobStatus!
  statusId: Int
  typeId: Int
  updatedAt: DateTime!
  userId: String
}

type OptimizationFile {
  contentHash: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  fileExtension: String!
  filePath: String
  fileType: String!
  fileTypeEnum: OptimizationFileType!
  fileVersion: Int
  fullName: String!
  id: String!
  jobFailed: Boolean
  matchings: JSON
  name: String!
  project: Project
  projectId: String
  roundId: String
  rowNumber: Int
  scenarioId: String
  sheetName: String
  status: OptimizationFileStatusEnum
  updatedAt: DateTime!
}

enum OptimizationFileStatusEnum {
  ERRORED
  NEW
  PROCESSED
}

enum OptimizationFileType {
  bid_baseline
  bid_import
  bid_template
  capacities
  discounts
}

type ParticipatingSupplier {
  eventId: ID
  id: ID!
  name: String!
  uploadedDocuments: [File!]
}

type Project {
  awardedScenario: Scenario
  awardedScenarioId: String
  baseline: ProjectBaseline
  biddingRound(biddingRoundId: ID!): BiddingRound
  biddingRounds: [BiddingRound]
  biddingTypeId: Int
  branch: Branch
  branchId: String
  category: AllCategoryType
  costFormulas: [CostFormula!]!
  createdAt: DateTime!
  currencyId: Int
  deletedAt: DateTime
  demands: [Demand]
  downloadBidSheetFileUrl: String

  """
  Returns an event for project, expose only for rfq buyer event dashboard
  """
  event: Event

  """
  Returns a list of event for project, use field in ProjectCard for defining correct redirect
  """
  events: [Event]
  externalProjectId: String
  hasDemands: Boolean!
  hasOfferFiles: Boolean
  hasWriteAccess: Boolean
  id: String!
  latestBiddingRound: BiddingRound
  name: String!
  optimizationFile(fileId: ID!): OptimizationFile
  projectCategoryType: ProjectCategoryType!
  projectCategoryTypeId: Int!
  rawScenariosWithAllocations: JSON
  scenario(id: ID!): Scenario
  scenarios: [Scenario!]!
  setting: JSON
  status: EnumProjectsStatus!
  type: EnumProjectType!
  unitId: Int
  updatedAt: DateTime!
  userProjectAccesses: [User]
}

type ProjectAccess {
  accessType: String!
  accessTypeEnum: ProjectAccessType
  createdAt: DateTime!
  json: JSON
  project: Project!
  projectId: String!
  updatedAt: DateTime!
  user: User!
  userId: String!
}

enum ProjectAccessType {
  READ
  READ_AND_WRITE
  SUPPLIER
}

type ProjectAnalyticsInsight {
  config: JSON
  payload: JSON
  type: ProjectAnalyticsInsightType!
}

"""
Type of anayltics insight from aggrevator
"""
enum ProjectAnalyticsInsightType {
  ITEMS_WITHOUT_BIDS
  MAIN_CHALLENGER
  NO_ITEMS_WITHOUT_BIDS
  NO_OUTLIERS
  NO_SINGLE_SOURCED_ITEMS
  OUTLIERS
  SINGLE_SOURCED_ITEMS
}

type ProjectBaseline {
  lastFileUploaded: File
}

type ProjectBiddingType {
  code: String!
  createdAt: DateTime!
  id: Int!
  name: String!
  projects(
    after: ProjectWhereUniqueInput
    before: ProjectWhereUniqueInput
    first: Int
    last: Int
  ): [Project!]!
  updatedAt: DateTime!
}

type ProjectCategoryType {
  id: Int!
  name: String!
  parentId: Int
}

type ProjectCurrency {
  code: String!
  createdAt: DateTime!
  currencyName: String!
  id: Int!
  isMain: Boolean!
  updatedAt: DateTime!
}

type ProjectInfo {
  capacities: [String]
  criteria: [String]
  custom_columns: [String]
  filters: [JSON]
  filters_map: [JSON]
  has_historic_prices: Boolean
  has_incumbent_prices: Boolean
  has_multi_currencies: Boolean
  has_total_fixed_price: Boolean
  item_level_capacities: [String]
  item_types: [String]
  items: [String]
  num_items: Int
  num_suppliers: Int
  price_components: [String]
  price_components_order: [JSON]
  price_components_structure: [JSON]
  raw_item_types: [String]
  second_axis: [String]
  suppliers: [String]
  volumes: [String]
}

type ProjectKpiDef {
  calculation: String!
  createdAt: DateTime!
  description: String!
  id: String!
  isDefault: Boolean
  name: String!
  project: Project
  projectId: String
  scenarioKpis(
    after: ScenarioKpiWhereUniqueInput
    before: ScenarioKpiWhereUniqueInput
    first: Int
    last: Int
  ): [ScenarioKpi!]!
  updatedAt: DateTime!
}

type ProjectNameDuplicatedError implements UserActionError {
  duplicatedName: String!
  message: String!
}

type ProjectUnit {
  code: String!
  createdAt: DateTime!
  id: Int!
  name: String!
  updatedAt: DateTime!
}

input ProjectWhereUniqueInput {
  id: String
}

type PublishBiddingRoundUnknownError implements UserActionError {
  message: String!
}

union PublishEventBiddingRoundError =
    EndDateDoesNotExistError
  | NoDemandsInBiddingRoundError
  | PublishBiddingRoundUnknownError
  | SupplierIsNotUserError

type PublishEventBiddingRoundPayload {
  event: Event
  publishEventBiddingRoundError: PublishEventBiddingRoundError
}

type Query {
  aribaImportStatus(jobId: ID!, projectId: ID!): AribaImportStatus!
  bidSheetTemplateReuploadDiff(jobId: ID!): TemplateReuploadJobState!
  biddingRounds(projectId: String!): [BiddingRound]
  branch(id: String!): Branch
  branches: [Branch]
  companies: [Company]
  company(id: String!): Company
  currencyRates(projectId: String!): [CurrencyRate]
  enhancedDemandNames(
    enhancedItemNameSettingExample: [String]
    projectId: String!
  ): DemandsPayload
  event(eventId: ID!): Event
  events: [Event!]!
  findOptimizationFileInNew(projectId: String!, roundId: String!): Boolean
  generateSupplierFeedbackSheets(projectId: ID!): String
  invites(eventId: ID!, projectId: String!): [Invite!]!
  isFeatureEnabled(featureName: String!): Boolean
  jobStatus(jobId: ID!): Job
  me: User
  optimizationFiles(
    fileTypeEnum: OptimizationFileType
    projectId: String!
    roundId: String!
  ): [OptimizationFile]
  project(projectId: String!): Project
  projectAnalyticsInsights(projectId: ID!): [ProjectAnalyticsInsight!]!
  projectCategories: [ProjectCategoryType!]!
  projectInfo(projectId: String!): ProjectInfo
  projects: [Project]
  rfqProgressBar(biddingRoundId: ID!, eventId: ID!): RfqProgressBar
  roles: [Role]
  supplierEvent(id: ID!): SupplierEvent
  users: [User]
  usersByBranch: [User]
  usersWithProjectAccess(projectId: String!): [ProjectAccess]
}

type RawAllocation {
  demandAttributes: JSON
  demandId: ID
  id: ID
  isManual: Boolean
  item: String
  kpiAttributes: JSON
  offerAttributes: JSON
  offerId: ID
  roundId: ID
  scenarioId: ID
  supplier: String
  totalPrice: Float
  volume: Float
}

type RawScenarioWithAllocations {
  allocations: [RawAllocation]!
  id: ID!
}

type RfqProgressBar {
  additionalInputsStep: Boolean
  bidSheetStep: Boolean
  costFormulaStep: Boolean
  documentsStep: Boolean
  scheduleStep: Boolean
  suppliersStep: Boolean
}

type Role {
  branches(
    after: BranchWhereUniqueInput
    before: BranchWhereUniqueInput
    first: Int
    last: Int
  ): [Branch!]!
  createdAt: DateTime!
  id: Int!
  name: String!
  permissions: [String!]!
  updatedAt: DateTime!
  users(
    after: UserWhereUniqueInput
    before: UserWhereUniqueInput
    first: Int
    last: Int
  ): [User!]!
}

type Scenario {
  allocation(id: ID!): Allocation
  allocations: [Allocation!]!
  branch: Branch!
  branchId: String!
  createdAt: DateTime!
  deletedAt: DateTime
  description: String
  id: String!
  invalidate: Boolean!
  isAwardedScenario: Boolean
  isDefault: Boolean
  json: JSON
  lastOptimization: DateTime
  name: String!
  optimizations: [Optimization!]
  project: Project
  projectId: String
  status: String!
  updatedAt: DateTime!
}

type ScenarioKpi {
  allocation: Allocation
  allocationId: String
  id: String!
  projectKpiDefId: String!
  scenario: Scenario!
  scenarioId: String!
  value: Float!
}

input ScenarioKpiWhereUniqueInput {
  id: String
}

type Session {
  data: String
  expires: DateTime
  sid: String!
  userId: String
}

enum SortOrderEnum {
  ASC
  DESC
}

type SupplierAlreadyInvitedError implements UserActionError {
  emailAddress: String!
  message: String!
}

input SupplierBidDataFilter {
  columnId: String!
  max: Float
  min: Float
  value: String
}

input SupplierBidDataFilterOptions {
  errorsOnly: Boolean
  filters: [SupplierBidDataFilter!]!
}

type SupplierBidDataPage {
  count: Int!
  data: [JSON!]!
  hasNext: Boolean!
  total: Int!
}

input SupplierBidDataSortOptions {
  columnId: String!
  direction: SortOrderEnum
}

type SupplierBiddingRound {
  biddingData: JSON
  createdAt: DateTime
  description: String
  id: ID!
  name: String!
  updatedAt: DateTime
}

type SupplierDocument {
  createdAt: DateTime!
  fileName: String!
  id: ID!
  updatedAt: DateTime!
}

type SupplierEvent {
  bidSheetColumns: [BidColumn!]
  bidSheetTemplateUrl: String
  biddingRound(id: ID!): SupplierBiddingRound
  biddingRounds(id: ID!): [SupplierBiddingRound!]!
  collaborators: [SupplierEventCollaborator!]!
  contactPersonEmail: String!
  contactPersonName: String!
  createdAt: DateTime
  description: String
  id: ID!
  latestBiddingRound: SupplierBiddingRound
  name: String!
  participationProgress: SupplierParticipationProgress!
  sourcingDocuments: [File!]
  status: SupplierEventStatus!
  supplierDocuments: [SupplierDocument!]
  updatedAt: DateTime
}

type SupplierEventCollaborator {
  id: ID!
  initials: String!
}

type SupplierEventParticipationInfo {
  participationConfirmed: Boolean!
}

"""
Status of a supplier event
"""
enum SupplierEventStatus {
  ACTIVE
  FINISHED
}

type SupplierIsNotUserError implements UserActionError {
  message: String!
}

"""
Current progression status of a supplier within an event
"""
enum SupplierParticipationProgress {
  CONFIRMATION_DECLINED
  CONFIRMATION_PENDING
  OFFERS_PENDING
  OFFERS_SUBMITTED
  OFFERS_UPLOADED
  OFFERS_UPLOADED_AND_VALID
}

type TemplateReuploadColumnsDiff {
  ignoredColumns: [String!]
}

type TemplateReuploadDiff {
  columns: TemplateReuploadColumnsDiff
  items: TemplateReuploadItemsDiff
  validationErrors: TemplateReuploadValidationError
}

type TemplateReuploadItemsDiff {
  addedItems: [String!]
  modifiedItems: [String!]
  removedItems: [String!]
}

type TemplateReuploadJobState {
  data: TemplateReuploadDiff
  job: Job!
}

type TemplateReuploadValidationError {
  concerning: [String!]!
  errorType: ValidationError!
}

type Translator {
  branch: Branch!
  branchId: String!
  createdAt: DateTime!
  id: String!
  name: String!
  optimizationFile: OptimizationFile
  optimizationFileId: String
  updatedAt: DateTime!
}

input UpdateDemandInput {
  attribute: JSON
  id: String
}

"""
The `Upload` scalar type represents a file upload.
"""
scalar Upload

type UrlPayload {
  url: String
}

type User {
  accountType: AccountType!
  branch: Branch!
  branchId: String!
  createdAt: DateTime!
  email: String!
  firstName: String!
  id: String!
  initial: String
  isBuyer: Boolean!
  isSupplier: Boolean!
  language: Language!
  lastName: String!
  role: Role
  roleId: Int
  username: String!
}

interface UserActionError {
  message: String!
}

type UserAlreadyExistsCreateUserError implements UserActionError {
  message: String!
}

type UserBelongsToSSOOrgCreateUserError implements UserActionError {
  message: String!
  user: User
}

input UserWhereUniqueInput {
  id: String
  username: String
}

enum ValidationError {
  ANY_COLUMNS_MISSING
  DUPLICATED_ITEMS
  NO_CHANGES
  START_ROW_CONTAINS_NO_COLUMNS
  UNKNOWN
  WRONG_BID_SHEET
}
